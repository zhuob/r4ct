% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/take_snapshot.R
\name{take_snapshot}
\alias{take_snapshot}
\alias{take_snapshot.event}
\alias{take_snapshot.time}
\title{Take a snapshot of simulated survival trial data}
\usage{
take_snapshot(by = c("time", "event"), ...)

\method{take_snapshot}{event}(dummy, n_event, accrual_time, survival_time, dropout_time, ...)

\method{take_snapshot}{time}(snapshot_time, accrual_time, survival_time, dropout_time, ...)
}
\arguments{
\item{by}{Character string specifying the snapshot method.
Options are \code{"time"} or \code{"event"}.}

\item{...}{absorbs unused arguments from the generic}

\item{dummy}{Dispatched S3 selector; not user-supplied}

\item{n_event}{Integer. The number of events at which to take the snapshot.}

\item{accrual_time}{Numeric vector. Subject accrual times.}

\item{survival_time}{Numeric vector. Subject survival times.}

\item{dropout_time}{Numeric vector. Subject dropout times.}

\item{snapshot_time}{Numeric scalar. The calendar time at which to
take the snapshot.}
}
\value{
A tibble containing subject-level information with derived flags
and observation times at the chosen snapshot.

A tibble with subject-level accrual, survival, dropout,
event/dropout flags, and observed time up to the snapshot.

A tibble with subject-level accrual, survival, dropout,
event/dropout flags, and observed time up to the snapshot.
}
\description{
Generic function to derive a "snapshot" of patient-level data in a
simulated time-to-event trial, either by a fixed number of events
or by a fixed calendar time.
The specific behavior is implemented by S3 methods:
\itemize{
\item \code{\link{take_snapshot.event}} - snapshot when the \eqn{n}-th event occurs
\item \code{\link{take_snapshot.time}} - snapshot at a fixed calendar time
}

Takes a snapshot at the calendar time corresponding to the
\code{n_event}-th observed event. Events are defined as subjects
whose survival time is less than or equal to dropout time.

Takes a snapshot at a fixed calendar time, recording event/dropout status
and time under observation for each subject at that time.
}
\examples{
# an example to verify against rpact output

design0 <- rpact::getDesignGroupSequential(
  sided = 1, 
  alpha = 0.02, 
  informationRates = c(0.65, 1), 
  typeOfDesign = "asUser", 
  userAlphaSpending = c(0, 0.02)
) 
accruals <- rpact::getAccrualTime(
  maxNumberOfSubjects = 800, 
  accrualTime = c(0, 3, 6), 
  accrualIntensity = c(5, 10, 20)
)



dat <- rpact::getSimulationSurvival(
  seed = 123,
  design = design0,
  directionUpper = FALSE, 
  median2 = 17.2,
  hazardRatio = 0.79, 
  dropoutRate1 = 0.001,
  dropoutRate2 = 0.001, 
  dropoutTime = 1, 
  accrualTime = accruals,
  plannedEvents = c(390, 600),
  maxNumberOfIterations = 10,
  maxNumberOfRawDatasetsPerStage = 10
)

df1 <- rpact::getRawData(dat) \%>\% dplyr::filter(iterationNumber == 1)
df2 <- rpact::getData(dat) \%>\% dplyr::filter(iterationNumber == 1)

df4 <- take_snapshot(
  by = "event",
  n_event = 390, 
  accrual_time = df1$accrualTime, 
  survival_time = df1$survivalTime, 
  dropout_time = df1$dropoutTime
)

r4ct::run_survival(
  time = df4$time_under_observation, 
  censor = df4$event_flag, 
  arm = df1$treatmentGroup, 
  control = 2, 
  conf_level = 0.95
)
snaptime0 <- df4$snapshot_time[1]
df5 <- take_snapshot(
  by = "time",
  snapshot_time = snaptime0, 
  accrual_time = df1$accrualTime, 
  survival_time = df1$survivalTime, 
  dropout_time = df1$dropoutTime
)

r4ct::run_survival(
  time = df5$time_under_observation, 
  censor = df5$event_flag, 
  arm = df1$treatmentGroup, 
  control = 2, 
  conf_level = 0.95
)


}
\seealso{
\code{\link[=take_snapshot.time]{take_snapshot.time()}}

\code{\link[=take_snapshot.event]{take_snapshot.event()}}
}
